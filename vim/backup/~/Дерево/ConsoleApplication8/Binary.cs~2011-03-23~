using System;
using System.Collections.Generic;
using System.Linq;
using System.Collections;
using System.Text;

namespace ConsoleApplication8
{
    public class BinaryTreeNode<T>
    {
        public int Frequency { get; set; } // кратность или частота
        public T Value { get; private set; } //значение
        public BinaryTreeNode<T> LeftNode { get; set; } // указатель на левого сына
        public BinaryTreeNode<T> RightNode { get; set; }// указатель на правого сына
        public int x, y;
        public BinaryTreeNode() { }
        public BinaryTreeNode(T value, int a, int b)
        {
            Frequency = 1;
            Value = value;
            x = a;
            y = b;
        }

        public void Print(BinaryTreeNode<T> main, int x, int y)
        {
            if (main.LeftNode != null)
            {
                if (!string.IsNullOrEmpty(main.LeftNode.Value.ToString()))
                {                   
                    Print(main.LeftNode, main.LeftNode.x, main.LeftNode.y);
                }
            }
            Console.SetCursorPosition(x , y);
            Console.Write(main.Value);
            Console.ReadLine();
            if (main.RightNode != null)
            {
                if (!string.IsNullOrEmpty(main.RightNode.Value.ToString()))
                {     
                    Print(main.RightNode, main.RightNode.x, main.RightNode.y);
                }
            }

        }
    }

    public class KodeKeyValue
    {
        public char k;
        public int v;
        public KodeKeyValue() { }
        public KodeKeyValue(char k, int v) 
        {
            this.k = k;
            this.v = v;
        }
        public char Key
        {
            set { k = value; }
            get { return k; }
        }
        public int Value
        {
            set { v = value; }
            get { return v; }
        }
    }

    public class BinaryTreeFactory
    {
        public BinaryTreeNode<T> CreateTree<T>(IEnumerable<T> list, IComparer comparer)
        {
            if ((list == null) || !list.Any())
                return null;
            var treeRoot = new BinaryTreeNode<T>(list.ElementAt(0), 30, 0);
            foreach (var element in list.Skip(1))
            {
                InsertNewElementIntoTree(treeRoot, element, comparer);
            }
            return treeRoot;
        }

        private void InsertNewElementIntoTree<T>(BinaryTreeNode<T> treenode, T element, IComparer comparer)
        {
            int comparisionResult = comparer.Compare(element, treenode.Value);
            if (comparisionResult == 0)
                treenode.Frequency++;
            else if (comparisionResult > 0)
            {
                if (treenode.RightNode == null)
                {
                    treenode.RightNode = new BinaryTreeNode<T>(element, treenode.x + 8, treenode.y + 1);
                }
                else
                    InsertNewElementIntoTree(treenode.RightNode, element, comparer);
            }
            else
            {
                if (treenode.LeftNode == null)
                {
                    treenode.LeftNode = new BinaryTreeNode<T>(element, treenode.x - 5, treenode.y + 1);
                }
                else
                    InsertNewElementIntoTree(treenode.LeftNode, element, comparer);
            }
        }

//-----------------------------------------------------------------------------------------------------------

        public BinaryTreeNode<string> CreateTreeStr(IEnumerable<string> list, IEnumerable<char> listchar, IComparer comparer)
        {
            if ((list == null) || !list.Any())
                return null;
            List<string> mask = list.ToList<string>();
            List<char> maskchar = listchar.ToList<char>();
            List<KodeKeyValue> treeelements = new List<KodeKeyValue>();
            int i = 0,j=0,j1=0;
            while (mask.Count() > 1)
            {
                int a = int.Parse(mask[i]);
                int b = int.Parse(mask[i+1]);
                if (maskchar.Count > 1)
                {
                    treeelements.Add(new KodeKeyValue(maskchar[i], a));
                    treeelements.Add(new KodeKeyValue(maskchar[i + 1], b));
                }
                int c = a + b;
                mask.Remove(mask[i]);
                mask.Remove(mask[i]);
                if (maskchar.Count > 1)
                {
                    maskchar.Remove(maskchar[i]);
                    maskchar.Remove(maskchar[i]);
                }
                treeelements.Add(new KodeKeyValue('0', c));
                j = 0;
                while ((j<mask.Count)&&(c > int.Parse(mask[j])))
                {
                    j++;
                }
                mask.Add("");
                j1 = mask.Count-1;
                while(j1>j)
                {
                    mask[j1] = mask[j1 - 1];
                    j1--;
                }
                mask[j] = c.ToString();
            }
            var treeRoot = new BinaryTreeNode<string>(treeelements[treeelements.Count-1].Value.ToString(), 30, 0);
            foreach (KodeKeyValue element in treeelements.Skip(1))
            {
                InsertNewElementIntoTreeStr(treeRoot, element, comparer);
            }
            return treeRoot;
        }

        private void InsertNewElementIntoTreeStr(BinaryTreeNode<string> treenode, KodeKeyValue element, IComparer comparer)
        {
            int comparisionResult = comparer.Compare(element.Value, int.Parse(treenode.Value));
            if (comparisionResult == 0)
                treenode.Frequency++;
            else if (comparisionResult > 0)
            {
                if (treenode.RightNode == null)
                {
                    treenode.RightNode = new BinaryTreeNode<string>(element.Value.ToString(), treenode.x + 8, treenode.y + 1);
                }
                else
                    InsertNewElementIntoTree(treenode.RightNode, element.Value.ToString(), comparer);
            }
            else
            {
                if (treenode.LeftNode == null)
                {
                    treenode.LeftNode = new BinaryTreeNode<string>(element.Value.ToString(), treenode.x - 5, treenode.y + 1);
                }
                else
                    InsertNewElementIntoTree(treenode.LeftNode, element.Value.ToString(), comparer);
            }
        }

    }
}
